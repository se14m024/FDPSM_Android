package com.fdpsm.exercise.dao;

import java.util.List;
import com.fdpsm.exercise.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.text.SimpleDateFormat;
// KEEP INCLUDES END
/**
 * Entity mapped to table "MOVIE_QUERY".
 */
public class MovieQuery {

    private Long id;
    /** Not-null value. */
    private String searchText;
    /** Not-null value. */
    private java.util.Date searchDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovieQueryDao myDao;

    private List<MovieResult> movieResultList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MovieQuery() {
    }

    public MovieQuery(Long id) {
        this.id = id;
    }

    public MovieQuery(Long id, String searchText, java.util.Date searchDate) {
        this.id = id;
        this.searchText = searchText;
        this.searchDate = searchDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovieQueryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getSearchText() {
        return searchText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSearchText(String searchText) {
        this.searchText = searchText;
    }

    /** Not-null value. */
    public java.util.Date getSearchDate() {
        return searchDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSearchDate(java.util.Date searchDate) {
        this.searchDate = searchDate;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MovieResult> getMovieResultList() {
        if (movieResultList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovieResultDao targetDao = daoSession.getMovieResultDao();
            List<MovieResult> movieResultListNew = targetDao._queryMovieQuery_MovieResultList(id);
            synchronized (this) {
                if(movieResultList == null) {
                    movieResultList = movieResultListNew;
                }
            }
        }
        return movieResultList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovieResultList() {
        movieResultList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return this.getSearchText() + " - " + sdf.format(this.getSearchDate());
    }
    // KEEP METHODS END

}
