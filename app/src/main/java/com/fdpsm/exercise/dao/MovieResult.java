package com.fdpsm.exercise.dao;

import com.fdpsm.exercise.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "MOVIE_RESULT".
 */
public class MovieResult {

    private Long id;
    /** Not-null value. */
    private String title;
    private long queryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovieResultDao myDao;

    private MovieQuery movieQuery;
    private Long movieQuery__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MovieResult() {
    }

    public MovieResult(Long id) {
        this.id = id;
    }

    public MovieResult(Long id, String title, long queryId) {
        this.id = id;
        this.title = title;
        this.queryId = queryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovieResultDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public long getQueryId() {
        return queryId;
    }

    public void setQueryId(long queryId) {
        this.queryId = queryId;
    }

    /** To-one relationship, resolved on first access. */
    public MovieQuery getMovieQuery() {
        long __key = this.queryId;
        if (movieQuery__resolvedKey == null || !movieQuery__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovieQueryDao targetDao = daoSession.getMovieQueryDao();
            MovieQuery movieQueryNew = targetDao.load(__key);
            synchronized (this) {
                movieQuery = movieQueryNew;
            	movieQuery__resolvedKey = __key;
            }
        }
        return movieQuery;
    }

    public void setMovieQuery(MovieQuery movieQuery) {
        if (movieQuery == null) {
            throw new DaoException("To-one property 'queryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.movieQuery = movieQuery;
            queryId = movieQuery.getId();
            movieQuery__resolvedKey = queryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    @Override
    public String toString() {
        return this.getTitle();
    }
    // KEEP METHODS END

}
