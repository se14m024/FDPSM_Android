package com.fdpsm.exercise.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fdpsm.exercise.dao.MovieDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_DETAIL".
*/
public class MovieDetailDao extends AbstractDao<MovieDetail, Long> {

    public static final String TABLENAME = "MOVIE_DETAIL";

    /**
     * Properties of entity MovieDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ReleaseDate = new Property(2, String.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property Runtime = new Property(3, String.class, "runtime", false, "RUNTIME");
        public final static Property PosterUrl = new Property(4, String.class, "posterUrl", false, "POSTER_URL");
    };


    public MovieDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL UNIQUE ," + // 1: title
                "\"RELEASE_DATE\" TEXT," + // 2: releaseDate
                "\"RUNTIME\" TEXT," + // 3: runtime
                "\"POSTER_URL\" TEXT);"); // 4: posterUrl
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOVIE_DETAIL_TITLE ON MOVIE_DETAIL" +
                " (\"TITLE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MovieDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(3, releaseDate);
        }
 
        String runtime = entity.getRuntime();
        if (runtime != null) {
            stmt.bindString(4, runtime);
        }
 
        String posterUrl = entity.getPosterUrl();
        if (posterUrl != null) {
            stmt.bindString(5, posterUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MovieDetail readEntity(Cursor cursor, int offset) {
        MovieDetail entity = new MovieDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // releaseDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // runtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // posterUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MovieDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setReleaseDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRuntime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosterUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MovieDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MovieDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
